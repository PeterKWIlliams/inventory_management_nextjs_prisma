// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id        String     @id @default(cuid())
  street    String
  city      String
  postcode  String
  location  Location[]
  user      User[]
  supplier  Supplier[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id              String            @id @default(cuid())
  firstName       String?
  lastName        String?
  email           String?           @unique
  userAddress     Address?          @relation(fields: [addressId], references: [id])
  addressId       String?
  managedLocation ManagedLocation[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([id])
  @@index([addressId])
}

model Location {
  id              String            @id @default(cuid())
  name            String
  address         Address           @relation(fields: [addressId], references: [id])
  addressId       String
  managedLocation ManagedLocation[]
  image_url       String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([addressId])
}

model ManagedLocation {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  location    Location      @relation(fields: [locationId], references: [id])
  userId      String
  locationId  String
  itemStorage ItemStorage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([locationId])
  @@index([userId])
}

model ItemStorage {
  id                String          @id @default(cuid())
  name              String
  location          String
  managedLocation   ManagedLocation @relation(fields: [managedLocationId], references: [id], onDelete: Cascade)
  managedLocationId String
  storedItem        StoredItem[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([managedLocationId])
}

model StoredItem {
  id   String @id @default(cuid())
  name String

  itemStorage   ItemStorage @relation(fields: [itemStorageId], references: [id], onDelete: Cascade)
  itemStorageId String
  ItemInfo      ItemInfo[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([itemStorageId])
}

model ItemInfo {
  id String @id @default(cuid())

  desiredQuantity Int?
  expiryDate      DateTime?
  purchaseDate    DateTime
  purchasePrice   Float
  storedItem      StoredItem @relation(fields: [storedItemId], references: [id], onDelete: Cascade)
  storedItemId    String
  BaseItem        BaseItem?  @relation(fields: [baseItemId], references: [id])
  baseItemId      String?
  supplier        Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId      String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([storedItemId])
  @@index([baseItemId])
  @@index([supplierId])
}

model Product {
  id          String        @id @default(cuid())
  name        String
  productInfo ProductInfo[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductInfo {
  id         String    @id @default(cuid())
  price      Float
  brand      String
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  BaseItem   BaseItem? @relation(fields: [baseItemId], references: [id])
  baseItemId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([supplierId])
  @@index([productId])
  @@index([baseItemId])
}

model Supplier {
  id   String @id @default(cuid())
  name String

  address     Address?      @relation(fields: [addressId], references: [id])
  addressId   String?
  productInfo ProductInfo[]
  ItemInfo    ItemInfo[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([addressId])
}

model BaseItem {
  id          String        @id @default(cuid())
  name        String
  type        String
  itemInfo    ItemInfo[]
  productInfo ProductInfo[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
