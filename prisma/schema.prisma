// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Address {
  id       String     @id @default(cuid())
  street   String
  city     String
  postcode String
  location Location[]
  user     User[]
  supplier Supplier[]
}

model User {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  email           String            @unique
  userAddress     Address           @relation(fields: [addressId], references: [id])
  addressId       String
  managedLocation ManagedLocation[]

  @@index([id])
  @@index([addressId])
}

model Location {
  id              String            @id @default(cuid())
  name            String
  address         Address           @relation(fields: [addressId], references: [id])
  addressId       String
  managedLocation ManagedLocation[]
  image_url       String?

  @@index([addressId])
}

model ManagedLocation {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  location    Location      @relation(fields: [locationId], references: [id])
  userId      String
  locationId  String
  itemStorage ItemStorage[]

  @@index([locationId])
  @@index([userId])
}

model ItemStorage {
  id                String           @id @default(cuid())
  name              String
  location          String
  managedLocation   ManagedLocation  @relation(fields: [managedLocationId], references: [id])
  managedLocationId String
  storedItem        StoredItem[]
  secondaryUsers    SecondaryUsers[]

  @@index([managedLocationId])
}

model SecondaryUsers {
  id            String      @id @default(cuid())
  type          String
  itemStorage   ItemStorage @relation(fields: [itemStorageId], references: [id])
  itemStorageId String

  @@index([itemStorageId])
}

model StoredItem {
  id            String      @id @default(cuid())
  quantity      Int
  itemStorage   ItemStorage @relation(fields: [itemStorageId], references: [id])
  itemStorageId String
  ItemInfo      ItemInfo[]

  @@index([itemStorageId])
}

model ItemInfo {
  id              String      @id @default(cuid())
  name            String
  type            String
  price           Float
  expiryDate      DateTime?
  creationDate    DateTime    @default(now())
  purchaseLink    String?
  imageUrl        String?
  desiredQuantity Int
  quantity        Int?
  storedItem      StoredItem? @relation(fields: [storedItemId], references: [id])
  storedItemId    String?
  product         Product?    @relation(fields: [productId], references: [id])
  productId       String?

  @@index([storedItemId])
  @@index([productId])
}

model Supplier {
  id   String @id @default(cuid())
  name String

  address   Address   @relation(fields: [addressId], references: [id])
  addressId String
  products  Product[]

  @@index([addressId])
}

model Product {
  id String @id @default(cuid())

  supplier   Supplier   @relation(fields: [supplierId], references: [id])
  supplierId String
  itemInfo   ItemInfo[]

  @@index([supplierId])
}
